input {
  file {
    codec => multiline {
        pattern => '^{'
        negate => true
        what => previous
        max_lines => 10000
    }
    path => "/output/instaloader/*.json"
    start_position => beginning
 }
}


filter {
  mutate {
      replace => [ "message", "%{message}}" ]
      gsub => [ 'message','\n','']
      remove_field => [ "@timestamp" ]
  }

  if [message] =~ /^{.*}$/ {
    json { source => message }
  }

  # if [node][owner] {
  #   mutate {
  #     add_field => { 
  #       "[owner][id]" => "%{[node][owner][id]}"
  #       "[owner][full_name]" => "%{[node][owner][full_name]}"
  #       "[owner][username]" => "%{[node][owner][username]}"
  #       "[owner][profile_pic_url]" => "%{[node][owner][profile_pic_url]}"
  #       "[owner][bio_links]" => "%{[node][owner][bio_links]}"
  #       "[owner][biography]" => "%{[node][owner][biography]}"
  #       "[owner][edge_follow]" => "%{[node][owner][edge_follow][count]}"
  #       "[owner][edge_followed_by]" => "%{[node][owner][edge_followed_by][count]}"
  #     }
  #   }
  # }

  if [node][edge_media_to_caption][edges][0][node][text] =~ /.+/ {
    mutate {
      add_field => { "text" => "%{[node][edge_media_to_caption][edges][0][node][text]}" }
    }
  } else {
    drop { }
  }

  if [node][edge_media_to_tagged_user][edges] {
    ruby {
      code => "
        if event.get('[node][edge_media_to_tagged_user][edges]')
          usernames = event.get('[node][edge_media_to_tagged_user][edges]').map { |edge| edge['node']['user']['username'] }
          event.set('taggedAccounts', usernames)
        end
      "
    }
  }

  mutate {
    add_field => {
      "id" => "%{[node][id]}"
      "url" => "%{[node][display_url]}"
      "shortcode" => "%{[node][shortcode]}"
      "likes" => "%{[node][edge_liked_by][count]}"
      "comments" => "%{[node][edge_media_to_comment][count]}"
      "timestamp" => "%{[node][taken_at_timestamp]}"
      }
  }

  prune { whitelist_names => [ "text", "taggedAccounts", "id", "url", "shortcode", "likes", "comments" "timestamp" ] }
}

output {
  file {
    codec => json
    path => "/output/instaloader-logstash.json"
  }
}