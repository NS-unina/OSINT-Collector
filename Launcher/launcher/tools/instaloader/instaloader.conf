input {
  file {
    codec => multiline {
        pattern => '^{'
        negate => true
        what => previous
        max_lines => 10000
    }
    path => "/output/instaloader/*.json"
    start_position => beginning
 }
}


filter {
  mutate {
      replace => [ "message", "%{message}}" ]
      gsub => [ 'message','\n','']
      remove_field => [ "@timestamp" ]
  }

  if [message] =~ /^{.*}$/ {
    json { source => message }
  }

  if [node][edge_media_to_caption][edges][0][node][text] =~ /.+/ {
    mutate {
      add_field => { "[post][text]" => "%{[node][edge_media_to_caption][edges][0][node][text]}" }
    }
  } else {
    drop { }
  }

  if [node][location] {
    ruby {
      code => "
        if event.get('[node][location]').nil?
          event.set('[post][location][name]', nil)
        else
          event.set('[post][location][name]', event.get('[node][location][name]'))
        end
      "
    }
  }

  if [node][owner] {
    mutate {
      add_field => { 
        "[owner][id]" => "%{[node][owner][id]}"
        "[owner][full_name]" => "%{[node][owner][full_name]}"
        "[owner][username]" => "%{[node][owner][username]}"
        "[owner][profile_pic_url]" => "%{[node][owner][profile_pic_url]}"
        "[owner][biography]" => "%{[node][owner][biography]}"
        "[owner][follow]" => "%{[node][owner][edge_follow][count]}"
        "[owner][followers]" => "%{[node][owner][edge_followed_by][count]}"
      }
    }
  }

  if [node][owner][bio_links] {
    ruby {
      code => "
        if event.get('[node][owner][bio_links]').nil? || event.get('[node][owner][bio_links]').empty?
          event.set('[owner][bio_links]', [])
        else
          links = event.get('[node][owner][bio_links]').map { |bio_links| bio_links['url'] }
          event.set('[owner][bio_links]', links)
        end
      "
    }
  }

  if [node][edge_media_to_tagged_user][edges] {
    ruby {
      code => "
        if event.get('[node][edge_media_to_tagged_user][edges]')
          usernames = event.get('[node][edge_media_to_tagged_user][edges]').map { |edge| edge['node']['user']['username'] }
          event.set('[post][taggedAccounts]', usernames)
        end
      "
    }
  }

  ruby {
    code => "
      if event.get('[node][edge_liked_by]')
        event.set('[post][likes]', event.get('[node][edge_liked_by][count]'))
      elsif event.get('[node][edge_media_preview_like]')
        event.set('[post][likes]', event.get('[node][edge_media_preview_like][count]'))
      else
        event.set('[post][likes]', nil)
      end
    "
  }

  mutate {
    add_field => {
      "[post][id]" => "%{[node][id]}"
      "[post][url]" => "%{[node][display_url]}"
      "[post][shortcode]" => "%{[node][shortcode]}"
      "[post][comments]" => "%{[node][edge_media_to_comment][count]}"
      "[post][timestamp]" => "%{[node][taken_at_timestamp]}"
    }
  }

  prune { whitelist_names => [ "owner", "post" ] }
}

output {
  file {
    codec => json
    path => "/output/instaloader-logstash.json"
  }
}